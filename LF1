#original code that is working

import boto3
import datetime
import dateutil.parser
import json
import logging
import math
import os
import time
from botocore.vendored import requests
import string

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

def get_slots(intent_request):
    return intent_request['currentIntent']['slots']


def close(session_attributes, fulfillment_state, message):
    response = {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'Close',
            'fulfillmentState': fulfillment_state,
            'message': message
        }
    }

    return response


def build_validation_result(is_valid, violated_slot, message_content):
    if message_content is None:
        return {
            "isValid": is_valid,
            "violatedSlot": violated_slot
        }

    return {
        'isValid': is_valid,
        'violatedSlot': violated_slot,
        'message': {'contentType': 'PlainText', 'content': message_content}
    }


def elicit_slot(session_attributes, intent_name, slots, slot_to_elicit, message):
    return {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'ElicitSlot',
            'intentName': intent_name,
            'slots': slots,
            'slotToElicit': slot_to_elicit,
            'message': message
        }
    }


""" --- Functions that control the bot's behavior --- """


def isvalid_date(date):
    try:
        dateutil.parser.parse(date)
        return True
    except ValueError:
        return False


def parse_int(n):
    try:
        return int(n)
    except ValueError:
        return float('nan')


def delegate(session_attributes, slots):
    return {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'Delegate',
            'slots': slots
        }
    }


def lambda_handler(event, context):
    # TODO implement
    os.environ['TZ'] = 'America/New_York'
    time.tzset()
    logger.info('{event}')
    return dispatch(event)


def dispatch(intent_request):
    logger.info(intent_request)
    logger.debug(
        'dispatch userId={}, intentName={}'.format(intent_request['userId'], intent_request['currentIntent']['name']))
    intent_name = intent_request['currentIntent']['name']

    logger.info('this is the intent')
    logger.info(intent_name)
    if intent_name == 'GreetingsIntent':
        return greeting_intent(intent_request)
    elif intent_name == 'DiningSuggestionIntent':
        return dining_suggestion_intent(intent_request)
    elif intent_name == 'ThankyouIntent':
        return thank_you_intent(intent_request)

    raise Exception('Intent with name ' + intent_name + ' not supported')


def greeting_intent(intent_request):
    return {
        'dialogAction': {
            "type": "ElicitIntent",
            'message': {
                'contentType': 'PlainText',
                'content': 'Hi there, how can I help?'}
        }
    }


def thank_you_intent(intent_request):
    return {
        'dialogAction': {
            "type": "ElicitIntent",
            'message': {
                'contentType': 'PlainText',
                'content': 'You are welcome!'}
        }
    }


def validate_dining_suggestion(num_people, datedate, timetime):
    logger.info(num_people)
    logger.info(datedate)
    logger.info(time)
    if num_people is not None:
        num_people = int(num_people)
        if num_people > 20 or num_people < 0:
            return build_validation_result(False,
                                           'NumberOfPeople',
                                           'Maximum 20 people allowed. Try again')

    if datedate is not None:
        if not isvalid_date(datedate):
            return build_validation_result(False, 'Date',
                                           'I did not understand that, what date would you like to book?')
        elif datetime.datetime.strptime(datedate, '%Y-%m-%d').date() <= datetime.date.today():
            return build_validation_result(False, 'Date', 'You can come tomorrow. What time is suitable?')

    if timetime is not None:
        if len(timetime) != 5:
            # Not a valid time; use a prompt defined on the build-time model.
            return build_validation_result(False, 'Time', None)

        hour, minute = timetime.split(':')
        hour = parse_int(hour)
        minute = parse_int(minute)
        if math.isnan(hour) or math.isnan(minute):
            # Not a valid time; use a prompt defined on the build-time model.
            return build_validation_result(False, 'Time', 'Not a valid time')

        if hour < 10 or hour > 16:
            # Outside of business hours
            return build_validation_result(False, 'Time',
                                           'Our business hours are from ten a m. to five p m. Can you specify a time during this range?')
    logger.info('I am finally here at the end!!')
    return build_validation_result(True, None, None)


def dining_suggestion_intent(intent_request):

    start=get_slots(intent_request)["start"]
    logger.info(start)
    partystate=get_slots(intent_request)["partystate"]
    food_type = get_slots(intent_request)["foodtype"]
    party=get_slots(intent_request)["party"]
    partydate = get_slots(intent_request)["partydate"]
    logger.info(partydate)
    party_time = get_slots(intent_request)["partytime"]
    phoneparty=get_slots(intent_request)["phoneparty"]
    source = intent_request['invocationSource']
    logger.info(source)
    if source == 'DialogCodeHook':
        slots = get_slots(intent_request)
        logger.info(slots)
        validation_result = validate_dining_suggestion(party,partydate, party_time)

        if not validation_result['isValid']:
            slots[validation_result['violatedSlot']] = None
            return elicit_slot(intent_request['sessionAttributes'],
                               intent_request['currentIntent']['name'],
                               slots,
                               validation_result['violatedSlot'],
                               validation_result['message'])

        #phone = get_slots(intent_request)["phoneparty"]
        #logger.info(start,partystate,food_type, party)
        SQS = boto3.client('sqs')
        u = 'https://sqs.us-east-1.amazonaws.com/982478973590/diningsearch'
        logging.debug("Got queue URL %s", u)
        #logger.debug("Recording with event %s", event)
        data = intent_request.get('data')
        try:
            logger.debug("Recording %s", data)
            logging.debug("Got queue URL %s", u)
            resp = SQS.send_message(
                QueueUrl=u,
                MessageBody="Dining Concierge message from LF1 ",
                MessageAttributes={
                    "city": {
                        "StringValue": str(get_slots(intent_request)["start"]),
                        "DataType": "String"
                    },
                    "state": {
                        "StringValue": str(get_slots(intent_request)["partystate"]),
                        "DataType": "String"
                    },
                    "foodtype": {
                        "StringValue": str(get_slots(intent_request)["foodtype"]),
                        "DataType": "String"
                    },
                    "noofpeople": {
                        "StringValue": str(get_slots(intent_request)["party"]),
                        "DataType": "String"
                    },
                    "partydate" : {
                        "StringValue": get_slots(intent_request)["partydate"],
                        "DataType": "String"
                    },
                    "partytime" : {
                        "StringValue": str(get_slots(intent_request)["partytime"]),
                        "DataType": "String"
                    },
                    "phone" : {
                        "StringValue": str(get_slots(intent_request)["phoneparty"]),
                        "DataType": "String"
                    }
                }
            )
            debug.info('this is in try and before except')
            debug.info(resp)
        except:
            print('An error happened')
        #logger.info('seriously am I here no way......')
        if intent_request[
            'sessionAttributes'] is not None:
            output_session_attributes = intent_request['sessionAttributes']
        else:
            output_session_attributes = {}

        return delegate(output_session_attributes, get_slots(intent_request))

    # cuisine = get_slots(intent_request)["Cuisine"]
    #email = get_slots(intent_request)["Email"]

    # Add Yelp API endpoint to get the data
    # requestData = {
    #                 "term":cuisine+", restaurants",
    #                 "location":location,
    #                 "categories":cuisine,
    #                 "limit":"3",
    #                 "peoplenum": num_people,
    #               "Date": date,
    #                 "Time": time
    #             }

    # resultData = restaurantApiCall(requestData)

    return close(intent_request['sessionAttributes'],
                 'Fulfilled',
                 {'contentType': 'PlainText',
                  'content': 'Thank you! You will recieve suggestion shortly'})
